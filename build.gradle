apply plugin: "groovy"
apply plugin: "application"
apply plugin: "metridoc"
apply plugin: "propdeps"
apply plugin: "propdeps-maven"
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'

group = "com.github.metridoc-job-cli"
mainClassName = "metridoc.cli.MetridocMain"
applicationName = "mdoc"

sourceCompatibility = "1.6"
targetCompatibility = "1.6"
archivesBaseName = "metridoc-job-cli"
version = "0.1.6"

sourceSets {
    integTest {
        groovy {
            srcDir "src/integ/groovy"
        }
        resources {
            srcDir "src/integ/resources"
        }
    }
}

buildscript {
    repositories {
        maven { url "http://dl.bintray.com/upennlib/metridoc" }
        maven { url 'http://repo.springsource.org/plugins-release' }
    }

    dependencies {
        classpath 'com.github.metridoc:metridoc-gradle-plugin:0.1.3',
                'org.springframework.build.gradle:propdeps-plugin:0.0.1'
    }
}

project.ext {
    bintrayRepo = "http://dl.bintray.com/upennlib/metridoc-distributions"
}

repositories {
    mavenCentral()
    maven {
        url "http://jcenter.bintray.com/"
    }
    maven {
        url "http://dl.bintray.com/upennlib/metridoc"
    }
}

dependencies {
    //core libraries that are required to get the cli up and running
    compile 'org.codehaus.groovy:groovy-all:2.0.8', 'org.apache.commons:commons-compress:1.5',
            'commons-cli:commons-cli:1.2', 'org.slf4j:slf4j-simple:1.7.5'

    //metridoc
    provided 'com.github.metridoc:metridoc-tool-gorm:0.2.2'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

    integTestCompile 'org.codehaus.groovy:groovy-all:2.0.8',
            "org.spockframework:spock-core:0.7-groovy-2.0"
}

task uploadDist(type: metridoc.gradle.GenericBintrayUpload, dependsOn: "distZip") {
    artifactFile = distZip.archivePath
    bintrayRepo = "https://api.bintray.com/content/upennlib/metridoc-distributions/${archivesBaseName}/$version/${distZip.archiveName}"
}

task addVersion << {
    def resourceDir = new File("$projectDir/src/main/resources")
    if(!resourceDir.exists()) {
        resourceDir.mkdir()
    }
    def versionFile = new File("$projectDir/src/main/resources/MDOC_VERSION")
    if (versionFile.exists()) {
        versionFile.delete()
    }
    versionFile.createNewFile()
    versionFile.write(project.version, "utf-8")
}

if (!project.version.toString().endsWith("SNAPSHOT")) {
    compileGroovy.dependsOn addVersion
}

task copyDependenciesToLib(type: Copy, dependsOn: ["installApp"]) {
    def destination = "$buildDir/install/$applicationName/lib"
    if(project.hasProperty("dependenciesDestination")) {
        destination = project.dependenciesDestination
    }
    into destination
    from configurations.provided
}

//for a single test, you can run "gradle -DintegTests.single=<test name>"
task integTests(type: Test, dependsOn: ["copyDependenciesToLib"]) {

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath

    include "**/*Spec*"
    exclude "**/Abstract*Spec*"
}

startScripts {
    doLast {
        File windowsScriptFile = file getWindowsScript()
        File unixScriptFile    = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replaceFirst(/CLASSPATH=[^\s]+/, 'CLASSPATH=%APP_HOME%\\\\lib\\\\*')
        unixScriptFile.text    = unixScriptFile.text.replaceFirst(/CLASSPATH=[^\s]+/, 'CLASSPATH=\\$APP_HOME/lib/*')
    }
}